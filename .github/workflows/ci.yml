name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: labo03_db
          MYSQL_USER: labo03
          MYSQL_PASSWORD: labo03
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 -ulabo03 -plabo03"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Create .env for tests
        run: |
          cat > .env << 'EOF'
          DB_HOST=127.0.0.1
          DB_PORT=3306
          DB_NAME=labo03_db
          DB_USER=labo03
          DB_PASS=labo03
          REDIS_HOST=127.0.0.1
          REDIS_PORT=6379
          REDIS_DB=0
          EOF

      - name: Install mysql-client
        run: sudo apt-get update && sudo apt-get install -y mysql-client

      - name: Wait for MySQL
        run: |
          for i in {1..40}; do
            if mysql -h127.0.0.1 -P3306 -ulabo03 -plabo03 -e "SELECT 1" labo03_db; then
              echo "MySQL is up!"
              break
            fi
            echo "MySQL not ready yet... ($i)"
            sleep 3
          done

      - name: Init DB schema
        run: |
          mysql -h127.0.0.1 -P3306 -ulabo03 -plabo03 labo03_db < db-init/init.sql

      - name: Run tests
        working-directory: src
        run: python -m pytest -q

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      # (Optionnel mais conseillÃ©) reprendre la main sur le workspace cÃ´tÃ© runner
      - name: Fix workspace permissions
        run: |
          if [ -n "$GITHUB_WORKSPACE" ]; then
            sudo chown -R "$USER":"$USER" "$GITHUB_WORKSPACE" || true
            find "$GITHUB_WORKSPACE" -type d -name "__pycache__" -prune -exec rm -rf {} + || true
          fi

      - uses: actions/checkout@v4

      # Si ton .env de prod est gÃ©rÃ© par secrets, recrÃ©e-le ici
      # - name: Create .env (prod)
      #   run: |
      #     cat > .env << 'EOF'
      #     DB_HOST=mysql
      #     DB_PORT=3306
      #     DB_NAME=labo03_db
      #     DB_USER=labo03
      #     DB_PASS=${{ secrets.DB_PASS }}
      #     REDIS_HOST=redis
      #     REDIS_PORT=6379
      #     REDIS_DB=0
      #     EOF

      - name: Deploy with Docker Compose
        run: |
          echo "ðŸš€ DÃ©ploiementâ€¦"
          docker network create labo03-network || true
          docker compose pull || true
          docker compose down || true
          docker compose up -d --build
          docker compose ps
          docker compose down -v
